// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: follows.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BulkCreateFollowsParams struct {
	Uri        string
	AuthorDid  string
	SubjectDid string
	CreatedAt  pgtype.Timestamp
}

const bulkDeleteFollows = `-- name: BulkDeleteFollows :many
DELETE
FROM follows
WHERE uri = ANY ($1::VARCHAR[])
RETURNING author_did, subject_did
`

type BulkDeleteFollowsRow struct {
	AuthorDid  string
	SubjectDid string
}

func (q *Queries) BulkDeleteFollows(ctx context.Context, uris []string) ([]BulkDeleteFollowsRow, error) {
	rows, err := q.db.Query(ctx, bulkDeleteFollows, uris)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BulkDeleteFollowsRow
	for rows.Next() {
		var i BulkDeleteFollowsRow
		if err := rows.Scan(&i.AuthorDid, &i.SubjectDid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createTempFollowsTable = `-- name: CreateTempFollowsTable :exec
CREATE TEMPORARY TABLE tmp_follows
    ON COMMIT DROP
AS
SELECT uri, author_did, subject_did, indexed_at, created_at
FROM follows
    WITH NO DATA
`

func (q *Queries) CreateTempFollowsTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createTempFollowsTable)
	return err
}

const insertFromTempToFollows = `-- name: InsertFromTempToFollows :many
INSERT INTO follows (uri, author_did, subject_did, created_at)
SELECT uri, author_did, subject_did, created_at
FROM tmp_follows
ON CONFLICT DO NOTHING
RETURNING uri, author_did, subject_did
`

type InsertFromTempToFollowsRow struct {
	Uri        string
	AuthorDid  string
	SubjectDid string
}

func (q *Queries) InsertFromTempToFollows(ctx context.Context) ([]InsertFromTempToFollowsRow, error) {
	rows, err := q.db.Query(ctx, insertFromTempToFollows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InsertFromTempToFollowsRow
	for rows.Next() {
		var i InsertFromTempToFollowsRow
		if err := rows.Scan(&i.Uri, &i.AuthorDid, &i.SubjectDid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
