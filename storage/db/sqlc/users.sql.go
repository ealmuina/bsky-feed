// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserFollowers = `-- name: AddUserFollowers :exec
UPDATE users
SET followers_count = followers_count + $2
WHERE did = $1
`

type AddUserFollowersParams struct {
	Did            string
	FollowersCount pgtype.Int4
}

func (q *Queries) AddUserFollowers(ctx context.Context, arg AddUserFollowersParams) error {
	_, err := q.db.Exec(ctx, addUserFollowers, arg.Did, arg.FollowersCount)
	return err
}

const addUserFollows = `-- name: AddUserFollows :exec
UPDATE users
SET follows_count = follows_count + $2
WHERE did = $1
`

type AddUserFollowsParams struct {
	Did          string
	FollowsCount pgtype.Int4
}

func (q *Queries) AddUserFollows(ctx context.Context, arg AddUserFollowsParams) error {
	_, err := q.db.Exec(ctx, addUserFollows, arg.Did, arg.FollowsCount)
	return err
}

const addUserPosts = `-- name: AddUserPosts :exec
UPDATE users
SET posts_count = users.posts_count + $2
WHERE did = $1
`

type AddUserPostsParams struct {
	Did        string
	PostsCount pgtype.Int4
}

func (q *Queries) AddUserPosts(ctx context.Context, arg AddUserPostsParams) error {
	_, err := q.db.Exec(ctx, addUserPosts, arg.Did, arg.PostsCount)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (did, handle, followers_count, follows_count, posts_count, last_update)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT DO NOTHING
`

type CreateUserParams struct {
	Did            string
	Handle         pgtype.Text
	FollowersCount pgtype.Int4
	FollowsCount   pgtype.Int4
	PostsCount     pgtype.Int4
	LastUpdate     pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Did,
		arg.Handle,
		arg.FollowersCount,
		arg.FollowsCount,
		arg.PostsCount,
		arg.LastUpdate,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE did = $1
`

func (q *Queries) DeleteUser(ctx context.Context, did string) error {
	_, err := q.db.Exec(ctx, deleteUser, did)
	return err
}

const getUser = `-- name: GetUser :one
SELECT did, handle, followers_count, follows_count, posts_count, indexed_at, last_update, engagement_factor
FROM users
WHERE did = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, did string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, did)
	var i User
	err := row.Scan(
		&i.Did,
		&i.Handle,
		&i.FollowersCount,
		&i.FollowsCount,
		&i.PostsCount,
		&i.IndexedAt,
		&i.LastUpdate,
		&i.EngagementFactor,
	)
	return i, err
}

const getUserDids = `-- name: GetUserDids :many
SELECT users.did
FROM users
`

func (q *Queries) GetUserDids(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserDids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var did string
		if err := rows.Scan(&did); err != nil {
			return nil, err
		}
		items = append(items, did)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserDidsToRefreshEngagement = `-- name: GetUserDidsToRefreshEngagement :many
SELECT DISTINCT u.did
FROM users u
         INNER JOIN posts p ON u.did = p.author_did
WHERE u.followers_count > 300
  AND p.created_at <= current_timestamp - interval '1 day'
  AND p.created_at > current_timestamp - interval '2 days'
`

func (q *Queries) GetUserDidsToRefreshEngagement(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserDidsToRefreshEngagement)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var did string
		if err := rows.Scan(&did); err != nil {
			return nil, err
		}
		items = append(items, did)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserDidsToRefreshStatistics = `-- name: GetUserDidsToRefreshStatistics :many
SELECT users.did
FROM users
WHERE last_update IS NULL
   OR last_update < current_timestamp - interval '30 days'
`

func (q *Queries) GetUserDidsToRefreshStatistics(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserDidsToRefreshStatistics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var did string
		if err := rows.Scan(&did); err != nil {
			return nil, err
		}
		items = append(items, did)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const refreshUserEngagement = `-- name: RefreshUserEngagement :one
WITH engagement_data AS (SELECT u1.did,
                                (SELECT COUNT(i.uri)
                                 FROM interactions i
                                          INNER JOIN posts p ON p.uri = i.post_uri
                                 WHERE p.author_did = u1.did
                                   AND i.created_at > now() - interval '7 days'
                                   AND p.created_at < now() - interval '1 day') AS count_interactions,
                                (SELECT COUNT(DISTINCT p.uri)
                                 FROM posts p
                                 WHERE p.author_did = u1.did
                                   AND p.created_at < now() - interval '1 day') AS count_posts
                         FROM users u1
                         WHERE u1.did = $1)
UPDATE users u
SET engagement_factor = ((q.count_interactions / NULLIF(q.count_posts::float, 0)) * 100 / u.followers_count) /
                        (5 / log(NULLIF(u.followers_count, 0)))
FROM engagement_data q
WHERE u.did = q.did
RETURNING u.did, u.followers_count, u.follows_count, u.posts_count, u.engagement_factor
`

type RefreshUserEngagementRow struct {
	Did              string
	FollowersCount   pgtype.Int4
	FollowsCount     pgtype.Int4
	PostsCount       pgtype.Int4
	EngagementFactor pgtype.Float8
}

func (q *Queries) RefreshUserEngagement(ctx context.Context, did string) (RefreshUserEngagementRow, error) {
	row := q.db.QueryRow(ctx, refreshUserEngagement, did)
	var i RefreshUserEngagementRow
	err := row.Scan(
		&i.Did,
		&i.FollowersCount,
		&i.FollowsCount,
		&i.PostsCount,
		&i.EngagementFactor,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET handle            = $2,
    followers_count   = $3,
    follows_count     = $4,
    posts_count       = $5,
    engagement_factor = $6,
    last_update       = $7
WHERE did = $1
`

type UpdateUserParams struct {
	Did              string
	Handle           pgtype.Text
	FollowersCount   pgtype.Int4
	FollowsCount     pgtype.Int4
	PostsCount       pgtype.Int4
	EngagementFactor pgtype.Float8
	LastUpdate       pgtype.Timestamp
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Did,
		arg.Handle,
		arg.FollowersCount,
		arg.FollowsCount,
		arg.PostsCount,
		arg.EngagementFactor,
		arg.LastUpdate,
	)
	return err
}
