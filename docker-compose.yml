services:
  api:
    build:
      context: .
    ports:
      - "3333:3333"
    volumes:
      - .:/app
    command: sh ./run.sh
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  db:
    image: mongo:latest
    ports:
      - "27017:27017"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: [
      "--replSet", "rs0",
      "--bind_ip_all",
      "--port", "27017",
      "--storageEngine", "wiredTiger",
      "--wiredTigerCollectionBlockCompressor", "zlib"
    ]
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
      - ./storage/db:/docker-entrypoint-initdb.d/
    restart: unless-stopped

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana.ini:/etc/grafana/grafana.ini
    restart: unless-stopped

volumes:
  mongo_data:
  mongo_config:
  redis_data:
  prometheus_data:
  grafana_data: